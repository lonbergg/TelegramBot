import logging
import os
import re
import asyncio
import asyncpg
import pandas as pd
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton,
    Message, CallbackQuery, FSInputFile
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from openpyxl import load_workbook, Workbook
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
DATABASE_HOST = os.getenv("DATABASE_HOST")
DATABASE_PORT = int(os.getenv("DATABASE_PORT"))
DATABASE_USER = os.getenv("DATABASE_USER")
DATABASE_PASSWORD = os.getenv("DATABASE_PASSWORD")
DATABASE_NAME = os.getenv("DATABASE_NAME")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
YOUTUBE_LINK = os.getenv("YOUTUBE_LINK")
TWITCH_LINK = os.getenv("TWITCH_LINK")
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()
router = Router()
logging.basicConfig(level=logging.INFO)

EXCEL_FILE = 'participants.xlsx'
LOG_FILE = 'broadcast_log.xlsx'
user_states = {}
participants_set = set()
admin_states = {}
banned_users = set()
last_message_times = {}
broadcast_buffer = {}

SPAM_INTERVAL = timedelta(seconds=5)

if not os.path.exists(EXCEL_FILE):
    wb = Workbook()
    ws = wb.active
    ws.title = "Participants"
    ws.append(["Telegram ID", "Username", "Full Name", "–î–∞—Ç–∞ —É—á–∞—Å—Ç—ñ", "GGPoker –ù—ñ–∫", "Email"])
    wb.save(EXCEL_FILE)

if not os.path.exists(LOG_FILE):
    wb = Workbook()
    ws = wb.active
    ws.title = "Logs"
    ws.append(["–î–∞—Ç–∞", "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–£—Å–ø—ñ—à–Ω–æ", "–ù–µ –≤–¥–∞–ª–æ—Å—è"])
    wb.save(LOG_FILE)

def export_db_to_excel(pool):
    async def inner():
        async with pool.acquire() as conn:
            rows = await conn.fetch("SELECT * FROM participants")
            df = pd.DataFrame(rows, columns=["telegram_id", "username", "full_name", "joined_at", "nickname", "email"])
            desktop = os.path.join(os.path.expanduser("~"), "Desktop")
            filename = os.path.join(desktop, f"participants_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx")
            df.to_excel(filename, index=False)
            return filename
    return inner

def save_participant(user: types.User, nickname: str, email: str):
    if user.id in participants_set:
        return False
    wb = load_workbook(EXCEL_FILE)
    ws = wb.active
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    for row in ws.iter_rows(min_row=2, values_only=True):
        if nickname == row[4] or user.id == row[0]:
            return False
    ws.append([
        user.id,
        f"@{user.username}" if user.username else "(–±–µ–∑ username)",
        full_name,
        datetime.now().strftime("%Y-%m-%d %H:%M"),
        nickname,
        email
    ])
    wb.save(EXCEL_FILE)
    participants_set.add(user.id)
    return True

async def save_participant_to_db(pool, user: types.User, nickname: str, email: str):
    async with pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO participants (telegram_id, username, full_name, joined_at, nickname, email)
            VALUES ($1, $2, $3, $4, $5, $6)
            ON CONFLICT (telegram_id) DO NOTHING
            """,
            user.id,
            f"@{user.username}" if user.username else "(–±–µ–∑ username)",
            f"{user.first_name or ''} {user.last_name or ''}".strip(),
            datetime.now(),
            nickname,
            email
        )


def user_menu(is_admin=False):
    buttons = [
        [KeyboardButton(text="üìú –£–º–æ–≤–∏"), KeyboardButton(text="üéÅ –ü—Ä–∏–∑–∏")],
        [KeyboardButton(text="üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞"), KeyboardButton(text="üìç –ú—ñ–π —Å—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="üéâ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑i–≥—Ä–∞—ài"), KeyboardButton(text="‚ùì FAQ")]
    ]
    if is_admin:
        buttons.append([KeyboardButton(text="üîê Admin panel")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")


def admin_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë• –£—á–∞—Å–Ω–∏–∫–∏"), KeyboardButton(text="üì• –ï–∫—Å–ø–æ—Ä—Ç Excel")],
            [KeyboardButton(text="üì§ –°–ø–∏—Å–æ–∫ –∑ –±–∞–∑–∏ PostgreSQL")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üì£ –†–æ–∑—Å–∏–ª–∫–∞")],
            [KeyboardButton(text="üïí –ü–ª–∞–Ω—É–≤–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É"), KeyboardButton(text="‚õî –ó–∞–±–∞–Ω–µ–Ω—ñ")],
            [KeyboardButton(text="‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å")]
        ],
        resize_keyboard=True
    )


@router.message(Command("start"))
async def welcome_user(message: Message):
    if message.from_user.id in banned_users:
        return
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ —É GGpoker Telegram –±–æ—Ç—ñ! –¶–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ, –∞ —Ç–∞–∫–æ–∂ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω, –±–æ–Ω—É—Å—ñ–≤ —Ç–∞ –∫–æ—Ä–∏—Å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ GGpoker. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –∞–±–æ –æ–¥—Ä–∞–∑—É —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ!",
        reply_markup=user_menu(message.from_user.id == ADMIN_ID)
    )


@router.message(F.text == "üéâ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑i–≥—Ä–∞—ài")
async def instructions(message: Message):
    if message.from_user.id in banned_users:
        return
    await message.answer("üîÑ –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ø–∏—Ç...", disable_notification=True)
    await asyncio.sleep(1.2)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è", callback_data="participate")]
    ])
    await message.answer(
        text=(
            "üìã –î–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ:\n"
            f"1. –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ Telegram –∫–∞–Ω–∞–ª: {CHANNEL_USERNAME}\n"
            f"2. –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ YouTube: {YOUTUBE_LINK}\n"
            f"3. –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ Twitch: {TWITCH_LINK}\n\n"
            "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏."
        ),
        reply_markup=kb
    )


@router.callback_query(F.data == "participate")
async def process_participation(callback: CallbackQuery):
    if callback.from_user.id in banned_users:
        return
    user = callback.from_user
    await callback.message.answer("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É...", disable_notification=True)
    await asyncio.sleep(1.5)
    member = await bot.get_chat_member(CHANNEL_USERNAME, user.id)
    if member.status not in ["member", "administrator", "creator"]:
        await callback.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ Telegram-–∫–∞–Ω–∞–ª!", show_alert=True)
        return
    user_states[user.id] = 'awaiting_nickname'
    await callback.message.answer("‚úÖ –í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è! –í–≤–µ–¥—ñ—Ç—å –≤–∞—à GGPoker –Ω—ñ–∫–Ω–µ–π–º.")
    await callback.answer()


@router.message()
async def handle_messages(message: Message):
    user_id = message.from_user.id
    text = message.text

    if user_id in banned_users:
        return

    now = datetime.now()
    last_time = last_message_times.get(user_id)
    if last_time and now - last_time < SPAM_INTERVAL:
        return
    last_message_times[user_id] = now

    if user_id in user_states:
        state = user_states[user_id]
        if state == 'awaiting_nickname':
            user_states[user_id] = {'step': 'awaiting_email', 'nickname': text.strip()}
            await message.reply("üìß –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É:")
            return
        elif isinstance(state, dict) and state.get('step') == 'awaiting_email':
            nickname = state['nickname']
            email = text.strip()
            if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
                await message.reply("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
                return
            if save_participant(message.from_user, nickname, email):
                await save_participant_to_db(dp['db'], message.from_user, nickname, email)
                await message.reply("‚úÖ –í–∞—à—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", reply_markup=user_menu(message.from_user.id == ADMIN_ID))
                user_states.pop(user_id)
            else:
                banned_users.add(user_id)
                await message.reply(
                    "üö´ –í–∏ –≤–∂–µ –±—Ä–∞–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –∞–±–æ –Ω–∞–º–∞–≥–∞–ª–∏—Å—è –æ–±–º–∞–Ω—É—Ç–∏ —Å–∏—Å—Ç–µ–º—É.\n\n"
                    "‚ÑπÔ∏è –ê–ª–µ –≤–∏ –≤—Å–µ –æ–¥–Ω–æ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º!"
                )
            return

    if text == "üì§ –°–ø–∏—Å–æ–∫ –∑ –±–∞–∑–∏ PostgreSQL" and user_id == ADMIN_ID:
        await message.answer("üîÑ –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑ PostgreSQL —É —Ñ–∞–π–ª...")
        export_func = export_db_to_excel(dp['db'])
        file_path = await export_func()
        await message.answer_document(FSInputFile(file_path))
        return

    if text == "üìú –£–º–æ–≤–∏":
        await message.answer(f"üìú –£–º–æ–≤–∏:\n1. –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ {CHANNEL_USERNAME}\n2. YouTube: {YOUTUBE_LINK}\n3. Twitch: {TWITCH_LINK}")
    elif text == "üéÅ –ü—Ä–∏–∑–∏":
        await message.answer("üéÅ –ü—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥: –±–æ–Ω—É—Å–∏ –¥–ª—è 3 —É—á–∞—Å–Ω–∏–∫—ñ–≤!")
    elif text == "üìç –ú—ñ–π —Å—Ç–∞—Ç—É—Å":
        status = "‚úÖ –í–∏ –±–µ—Ä–µ—Ç–µ —É—á–∞—Å—Ç—å!" if user_id in participants_set else "‚ùå –í–∏ —â–µ –Ω–µ –±—Ä–∞–ª–∏ —É—á–∞—Å—Ç—ñ."
        await message.answer(status)
    elif text == "üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞":
        await message.answer("–ó–≤'—è–∑–æ–∫ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é: https://t.me/" + SUPPORT_USERNAME.strip('@'))
    elif text == "‚ùì FAQ":
        await message.answer("‚ÑπÔ∏è –ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è:\n- –Ø–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —á–∏ —è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π?\n- –Ø–∫ –∑–º—ñ–Ω–∏—Ç–∏ –Ω—ñ–∫–Ω–µ–π–º?\n- –Ø–∫ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é?")
    elif text == "üë• –£—á–∞—Å–Ω–∏–∫–∏" and user_id == ADMIN_ID:
        wb = load_workbook(EXCEL_FILE)
        ws = wb.active
        info = "\n".join([f"{row[1]} | {row[2]} | {row[4]} | {row[3]}" for row in ws.iter_rows(min_row=2, values_only=True)])
        await message.answer(f"üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤:\n{info}")
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and user_id == ADMIN_ID:
        wb = load_workbook(EXCEL_FILE)
        ws = wb.active
        count = ws.max_row - 1
        await message.answer(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤: {count}")
    elif text == "üì• –ï–∫—Å–ø–æ—Ä—Ç Excel" and user_id == ADMIN_ID:
        await message.answer_document(FSInputFile(EXCEL_FILE))
    elif text == "üì£ –†–æ–∑—Å–∏–ª–∫–∞" and user_id == ADMIN_ID:
        admin_states[user_id] = "awaiting_broadcast"
        await message.answer("‚úâÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
    elif text == "üïí –ü–ª–∞–Ω—É–≤–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É" and user_id == ADMIN_ID:
        admin_states[user_id] = "awaiting_schedule"
        await message.answer("üïí –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD HH:MM —Ç–∞ —Ç–µ–∫—Å—Ç:")
    elif text == "‚õî –ó–∞–±–∞–Ω–µ–Ω—ñ" and user_id == ADMIN_ID:
        banned_list = "\n".join(map(str, banned_users)) if banned_users else "‚úÖ –ù–µ–º–∞—î –∑–∞–±–∞–Ω–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
        await message.answer(f"üö´ –ó–∞–±–∞–Ω–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:\n{banned_list}")
    elif text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å":
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é.", reply_markup=user_menu(user_id == ADMIN_ID))
    elif text == "üîê Admin panel" and user_id == ADMIN_ID:
        await message.answer("üîê –í—Ö—ñ–¥ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=admin_menu())
    elif user_id in admin_states and admin_states[user_id] == "awaiting_broadcast":
        broadcast_buffer[user_id] = {"text": text.strip()}
        await confirm_broadcast_manual(user_id)
        del admin_states[user_id]
    elif user_id in admin_states and admin_states[user_id] == "awaiting_schedule":
        try:
            parts = text.strip().split(" ", 2)
            date_time = datetime.strptime(f"{parts[0]} {parts[1]}", "%Y-%m-%d %H:%M")
            scheduler.add_job(lambda: asyncio.create_task(bot.send_message(ADMIN_ID, parts[2])), trigger=DateTrigger(run_date=date_time))
            await message.answer(f"üïí –†–æ–∑—Å–∏–ª–∫—É –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ {date_time}")
        except Exception as e:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–±–æ –ø–æ–º–∏–ª–∫–∞: " + str(e))
        finally:
            del admin_states[user_id]


async def confirm_broadcast_manual(user_id: int):
    data = broadcast_buffer.pop(user_id, None)
    if not data or "text" not in data:
        await bot.send_message(user_id, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    message_text = data["text"]

    wb = load_workbook(EXCEL_FILE)
    ws = wb.active
    count = 0
    failed = []

    for row in ws.iter_rows(min_row=2, values_only=True):
        try:
            await bot.send_message(row[0], message_text)
            count += 1
        except Exception as e:
            failed.append(row[0])
            logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ {row[0]}: {e}")

    log_wb = load_workbook(LOG_FILE)
    log_ws = log_wb.active
    log_ws.append([
        datetime.now().strftime("%Y-%m-%d %H:%M"),
        message_text,
        count,
        ", ".join(map(str, failed))
    ])
    log_wb.save(LOG_FILE)

    await bot.send_message(
        user_id,
        f"‚úÖ –†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {count} —É—á–∞—Å–Ω–∏–∫–∞–º. "
        f"–ù–µ –≤–¥–∞–ª–æ—Å—è: {len(failed)}"
    )


async def main():
    pool = await asyncpg.create_pool(
        user=DATABASE_USER,
        password=DATABASE_PASSWORD,
        database=DATABASE_NAME,
        host=DATABASE_HOST,
        port=DATABASE_PORT
    )
    dp['db'] = pool
    dp.include_router(router)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
