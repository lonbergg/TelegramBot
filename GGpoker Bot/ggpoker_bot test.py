import logging
import os
import re
import asyncio
import asyncpg
import pandas as pd
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton,
    Message, CallbackQuery, FSInputFile
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from openpyxl import load_workbook, Workbook
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
# –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –∫—ñ–ª—å–∫–æ—Ö –∞–¥–º—ñ–Ω—ñ–≤: –ø–µ—Ä–µ–¥–∞—î–º–æ —á–µ—Ä–µ–∑ ADMIN_IDS –≤ .env
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip().isdigit()]
DATABASE_HOST = os.getenv("DATABASE_HOST")
DATABASE_PORT = int(os.getenv("DATABASE_PORT", 5432))
DATABASE_USER = os.getenv("DATABASE_USER")
DATABASE_PASSWORD = os.getenv("DATABASE_PASSWORD")
DATABASE_NAME = os.getenv("DATABASE_NAME")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
YOUTUBE_LINK = os.getenv("YOUTUBE_LINK")
TWITCH_LINK = os.getenv("TWITCH_LINK")
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()
router = Router()
logging.basicConfig(level=logging.INFO)

# –®–ª—è—Ö–∏ —Ç–∞ —Å—Ç–∞–Ω–∏
EXCEL_FILE = 'participants.xlsx'
LOG_FILE = 'broadcast_log.xlsx'
user_states = {}
participants_set = set()
admin_states = {}
banned_users = set()
last_message_times = {}
broadcast_buffer = {}
SPAM_INTERVAL = timedelta(seconds=5)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
def schedule_broadcast(content: str):
    for aid in ADMIN_IDS:
        asyncio.create_task(bot.send_message(aid, content))


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏
async def notify_admins(text: str):
    for aid in ADMIN_IDS:
        try:
            await bot.send_message(aid, text)
        except Exception:
            pass


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤ Excel
if not os.path.exists(EXCEL_FILE):
    wb = Workbook()
    ws = wb.active
    ws.title = "Participants"
    ws.append(["Telegram ID", "Username", "Full Name", "–î–∞—Ç–∞ —É—á–∞—Å—Ç—ñ", "GGPoker –ù—ñ–∫", "Email"])
    wb.save(EXCEL_FILE)

if not os.path.exists(LOG_FILE):
    wb = Workbook()
    ws = wb.active
    ws.title = "Logs"
    ws.append(["–î–∞—Ç–∞", "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–£—Å–ø—ñ—à–Ω–æ", "–ù–µ –≤–¥–∞–ª–æ—Å—è"])
    wb.save(LOG_FILE)


# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ë–î —Ç–∞ Excel
def export_db_to_excel(pool):
    async def inner():
        async with pool.acquire() as conn:
            rows = await conn.fetch("SELECT * FROM participants")
            df = pd.DataFrame(rows, columns=["telegram_id", "username", "full_name", "joined_at", "nickname", "email"])
            desktop = os.path.join(os.path.expanduser("~"), "Desktop")
            filename = os.path.join(desktop, f"participants_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx")
            df.to_excel(filename, index=False)
            return filename
    return inner


def save_participant(user: types.User, nickname: str, email: str):
    if user.id in participants_set:
        return False
    wb = load_workbook(EXCEL_FILE)
    ws = wb.active
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    for row in ws.iter_rows(min_row=2, values_only=True):
        if nickname == row[4] or user.id == row[0]:
            return False
    ws.append([
        user.id,
        f"@{user.username}" if user.username else "(–±–µ–∑ username)",
        full_name,
        datetime.now().strftime("%Y-%m-%d %H:%M"),
        nickname,
        email
    ])
    wb.save(EXCEL_FILE)
    participants_set.add(user.id)
    return True


async def save_participant_to_db(pool, user: types.User, nickname: str, email: str):
    async with pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO participants (telegram_id, username, full_name, joined_at, nickname, email)
            VALUES ($1, $2, $3, $4, $5, $6)
            ON CONFLICT (telegram_id) DO NOTHING
            """,
            user.id,
            f"@{user.username}" if user.username else "(–±–µ–∑ username)",
            f"{user.first_name or ''} {user.last_name or ''}".strip(),
            datetime.now(),
            nickname,
            email
        )


# ‚îÄ‚îÄ‚îÄ –õ–û–ì–£–í–ê–ù–ù–Ø –†–û–ó–°–ò–õ–û–ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def log_broadcast(pool, message_text: str, success_count: int, failed_list: list[int]):
    async with pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO broadcast_logs (date, message, success_count, failed_ids)
            VALUES ($1, $2, $3, $4)
            """,
            datetime.now(),
            message_text,
            success_count,
            ", ".join(map(str, failed_list))
        )


# –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
def user_menu(is_admin: bool = False):
    buttons = [
        [KeyboardButton(text="üìú –£–º–æ–≤–∏"), KeyboardButton(text="üéÅ –ü—Ä–∏–∑–∏")],
        [KeyboardButton(text="üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞"), KeyboardButton(text="üìç –ú—ñ–π —Å—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="üéâ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥–∞—Ä—à—ñ"), KeyboardButton(text="‚ùì FAQ")],
        [KeyboardButton(text="üö´ –ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—å")],
    ]
    if is_admin:
        buttons.append([KeyboardButton(text="üîê Admin panel")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")


def support_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É")],
            [KeyboardButton(text="üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –Ω—ñ–∫–Ω–µ–π–º")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")],
        ],
        resize_keyboard=True
    )


def admin_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë• –£—á–∞—Å–Ω–∏–∫–∏"), KeyboardButton(text="üì• –ï–∫—Å–ø–æ—Ä—Ç Excel")],
            [KeyboardButton(text="üì§ –°–ø–∏—Å–æ–∫ –∑ –±–∞–∑–∏ PostgreSQL")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üì£ –†–æ–∑—Å–∏–ª–∫–∞")],
            [KeyboardButton(text="üïí –ü–ª–∞–Ω—É–≤–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É"), KeyboardButton(text="‚õî –ó–∞–±–∞–Ω–µ–Ω—ñ")],
            [KeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —É—á–∞—Å–Ω–∏–∫–∞")],  # –Ω–æ–≤–∞ –∫–Ω–æ–ø–∫–∞
            [KeyboardButton(text="‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å")],
        ],
        resize_keyboard=True
    )


# –•–µ–Ω–¥–ª–µ—Ä /start
@router.message(Command("start"))
async def welcome_user(message: Message):
    if message.from_user.id in banned_users:
        return
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ —É GGpoker Telegram –±–æ—Ç—ñ! –¶–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ, "
        "–∞ —Ç–∞–∫–æ–∂ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω, –±–æ–Ω—É—Å—ñ–≤ —Ç–∞ –∫–æ—Ä–∏—Å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó "
        "–ø—Ä–æ GGpoker. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.",
        reply_markup=user_menu(message.from_user.id in ADMIN_IDS)
    )


# –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥–∞—Ä—à—ñ
@router.message(F.text == "üéâ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥–∞—Ä—à—ñ")
async def participate_command(message: Message):
    if message.from_user.id in banned_users:
        return
    await message.answer("üîÑ –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ø–∏—Ç...", disable_notification=True)
    await asyncio.sleep(1.2)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è", callback_data="participate")]
    ])
    await message.answer(
        f"üìã –î–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥–∞—Ä—à—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ:\n"
        f"1. –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ Telegram –∫–∞–Ω–∞–ª: {CHANNEL_USERNAME}\n"
        f"2. –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ YouTube: {YOUTUBE_LINK}\n"
        f"3. –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ Twitch: {TWITCH_LINK}\n\n"
        "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.",
        reply_markup=kb
    )


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data == "participate")
async def check_subscription(callback: CallbackQuery):
    user = callback.from_user
    if user.id in banned_users:
        return
    await callback.message.answer("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É...", disable_notification=True)
    await asyncio.sleep(1.5)
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user.id)
        if member.status not in ["member", "administrator", "creator"]:
            await callback.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ Telegram-–∫–∞–Ω–∞–ª!", show_alert=True)
            return
    except Exception as e:
        await callback.answer("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)
        await notify_admins(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
        return

    user_states[user.id] = 'awaiting_nickname'
    await callback.message.answer("‚úÖ –í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è! –í–≤–µ–¥—ñ—Ç—å –≤–∞—à GGPoker –Ω—ñ–∫–Ω–µ–π–º.")
    await callback.answer()


# –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –∞–¥–º—ñ–Ω‚Äë–ø–∞–Ω–µ–ª—ñ
@router.message(F.text == "üîê Admin panel")
async def open_admin_panel(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω‚Äë–ø–∞–Ω–µ–ª—ñ.")
        return
    await message.answer("üîê –í—Ö—ñ–¥ –≤ –∞–¥–º—ñ–Ω‚Äë–ø–∞–Ω–µ–ª—å.", reply_markup=admin_menu())


# –ü—ñ–¥—Ç—Ä–∏–º–∫–∞
@router.message(F.text == "üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
async def show_support_options(message: Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç:", reply_markup=support_menu())


@router.message(F.text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É")
async def handle_write_support(message: Message):
    await message.answer(f"–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ç—É—Ç: https://t.me/{SUPPORT_USERNAME.strip('@')}")


@router.message(F.text == "üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –Ω—ñ–∫–Ω–µ–π–º")
async def handle_change_nickname(message: Message):
    user_states[message.from_user.id] = "awaiting_new_nickname"
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω—ñ–∫–Ω–µ–π–º –¥–ª—è –∑–∞–º—ñ–Ω–∏:")


@router.message(F.text == "üö´ –ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—å")
async def handle_complaint(message: Message):
    await message.answer("üòî –Ø–∫—â–æ —É –≤–∞—Å —î —Å–∫–∞—Ä–≥–∞ ‚Äî –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


@router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    await message.answer("üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=user_menu(message.from_user.id in ADMIN_IDS))


# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É—á–∞—Å—Ç—ñ
@router.callback_query(F.data == "confirm_participation")
async def confirm_participation(callback: CallbackQuery):
    user_id = callback.from_user.id
    state = user_states.get(user_id)
    if not state or not isinstance(state, dict):
        await callback.answer("‚ö†Ô∏è –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")
        return
    nickname = state["nickname"]
    email = state["email"]
    if save_participant(callback.from_user, nickname, email):
        await save_participant_to_db(dp['db'], callback.from_user, nickname, email)
        await callback.message.answer(
            "‚úÖ –£—á–∞—Å—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –£—Å–ø—ñ—Ö—ñ–≤!",
            reply_markup=user_menu(user_id in ADMIN_IDS)
        )
    else:
        banned_users.add(user_id)
        await callback.message.answer("üö´ –í–∏ –≤–∂–µ –±—Ä–∞–ª–∏ —É—á–∞—Å—Ç—å –∞–±–æ –Ω–∞–º–∞–≥–∞–ª–∏—Å—è –æ–±–¥—É—Ä–∏—Ç–∏ –±–æ—Ç–∞.")
    user_states.pop(user_id, None)
    await callback.answer()


# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∞–¥–º—ñ–Ω-—Ä–æ–∑—Å–∏–ª–∫–∏
@router.message()
async def handle_messages(message: Message):
    user_id = message.from_user.id
    text = message.text or ""
    if user_id in banned_users:
        return

    # –ê–Ω—Ç–∏—Å–ø–∞–º
    now = datetime.now()
    last = last_message_times.get(user_id)
    if last and now - last < SPAM_INTERVAL:
        return
    last_message_times[user_id] = now

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
    if user_id in user_states:
        state = user_states[user_id]
        if state == 'awaiting_nickname':
            user_states[user_id] = {'step': 'awaiting_email', 'nickname': text.strip()}
            await message.reply("üìß –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É:")
            return
        elif isinstance(state, dict) and state.get('step') == 'awaiting_email':
            nickname = state['nickname']
            email = text.strip()
            if not re.match(r'^[\w.-]+@[\w.-]+\.\w{2,}$', email):
                await message.reply("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
                return
            await message.answer(
                "‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ —É—á–∞—Å—Ç—å:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é —É—á–∞—Å—Ç—å", callback_data="confirm_participation")]
                ])
            )
            user_states[user_id] = {"nickname": nickname, "email": email}
            return

    # –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏
    if text == "üë• –£—á–∞—Å–Ω–∏–∫–∏" and user_id in ADMIN_IDS:
        rows = await dp['db'].fetch(
            "SELECT telegram_id, username, full_name, nickname, email, joined_at FROM participants"
        )
        if not rows:
            await message.answer("üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        else:
            info = "\n".join(
                f"{r['telegram_id']} | {r['username']} | {r['full_name']} | {r['nickname']} | {r['email']}"
                for r in rows
            )
            await message.answer(f"üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤:\n{info}")
        return
    elif text == "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —É—á–∞—Å–Ω–∏–∫–∞" and user_id in ADMIN_IDS:
        admin_states[user_id] = "awaiting_delete"
        await message.answer("üîç –í–≤–µ–¥—ñ—Ç—å Telegram ID —É—á–∞—Å–Ω–∏–∫–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
        return
    elif admin_states.get(user_id) == "awaiting_delete":
        try:
            pid = int(text.strip())
            await dp['db'].execute("DELETE FROM participants WHERE telegram_id = $1", pid)
            participants_set.discard(pid)
            wb = load_workbook(EXCEL_FILE)
            ws = wb.active
            for idx, row in enumerate(ws.iter_rows(min_row=2), start=2):
                if row[0].value == pid:
                    ws.delete_rows(idx)
                    break
            wb.save(EXCEL_FILE)
            await message.answer(f"üóëÔ∏è –£—á–∞—Å–Ω–∏–∫–∞ –∑ ID {pid} –≤–∏–¥–∞–ª–µ–Ω–æ.")
        except ValueError:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}")
        finally:
            admin_states.pop(user_id, None)
        return
    elif text == "üì§ –°–ø–∏—Å–æ–∫ –∑ –±–∞–∑–∏ PostgreSQL" and user_id in ADMIN_IDS:
        await message.answer("üîÑ –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫...")
        export_func = export_db_to_excel(dp['db'])
        file_path = await export_func()
        await message.answer_document(FSInputFile(file_path))
        return
    elif text == "üì£ –†–æ–∑—Å–∏–ª–∫–∞" and user_id in ADMIN_IDS:
        admin_states[user_id] = "awaiting_broadcast"
        await message.answer("‚úâÔ∏è –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        return
    elif text == "üïí –ü–ª–∞–Ω—É–≤–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É" and user_id in ADMIN_IDS:
        admin_states[user_id] = "awaiting_schedule"
        await message.answer("üïí –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É, —á–∞—Å (YYYY-MM-DD HH:MM) —Ç–∞ —Ç–µ–∫—Å—Ç:")
        return
    elif text == "‚õî –ó–∞–±–∞–Ω–µ–Ω—ñ" and user_id in ADMIN_IDS:
        banned_list = "\n".join(map(str, banned_users)) or "‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π."
        await message.answer(f"üö´ –ó–∞–±–∞–Ω–µ–Ω—ñ:\n{banned_list}")
        return
    elif text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å" and user_id in ADMIN_IDS:
        await message.answer("üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=user_menu(True))
        return
    # –†–æ–∑—Å–∏–ª–∫–∞
    if user_id in admin_states and admin_states[user_id] == "awaiting_broadcast":
        broadcast_buffer[user_id] = {"text": text.strip()}
        await confirm_broadcast_manual(user_id)
        admin_states.pop(user_id, None)
        return
    if user_id in admin_states and admin_states[user_id] == "awaiting_schedule":
        try:
            date_str, time_str, content = text.split(" ", 2)
            run_dt = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
            scheduler.add_job(schedule_broadcast, trigger=DateTrigger(run_date=run_dt), args=[content])
            await message.answer(f"üïí –†–æ–∑—Å–∏–ª–∫—É –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ {run_dt}")
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        finally:
            admin_states.pop(user_id, None)
        return


# –û–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º —ñ throttle
async def confirm_broadcast_manual(user_id: int):
    data = broadcast_buffer.pop(user_id, None)
    if not data:
        await bot.send_message(user_id, "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    msg = data["text"]
    async with dp['db'].acquire() as conn:
        rows = await conn.fetch("SELECT telegram_id FROM participants")
    count, failed = 0, []
    for r in rows:
        tid = r["telegram_id"]
        try:
            await bot.send_message(tid, msg)
            count += 1
            await asyncio.sleep(0.05)
        except Exception:
            failed.append(tid)
    await log_broadcast(dp['db'], msg, count, failed)
    await bot.send_message(user_id, f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞: {count} —É—Å–ø—ñ—à–Ω–æ, {len(failed)} –ø–æ–º–∏–ª–æ–∫.")


# Main
async def main():
    pool = await asyncpg.create_pool(
        user=DATABASE_USER,
        password=DATABASE_PASSWORD,
        database=DATABASE_NAME,
        host=DATABASE_HOST,
        port=DATABASE_PORT
    )
    dp['db'] = pool
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ participants_set —ñ–∑ –ë–î –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–±–ª—ñ–≤
    rows = await pool.fetch("SELECT telegram_id FROM participants")
    for r in rows:
        participants_set.add(r['telegram_id'])

    dp.include_router(router)
    scheduler.start()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

